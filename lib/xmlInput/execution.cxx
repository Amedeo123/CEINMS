// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "execution.hxx"

// TendonElementType
// 


// TendonType
// 

const TendonType::stiff_optional& TendonType::
stiff () const
{
  return this->stiff_;
}

TendonType::stiff_optional& TendonType::
stiff ()
{
  return this->stiff_;
}

void TendonType::
stiff (const stiff_type& x)
{
  this->stiff_.set (x);
}

void TendonType::
stiff (const stiff_optional& x)
{
  this->stiff_ = x;
}

void TendonType::
stiff (::std::auto_ptr< stiff_type > x)
{
  this->stiff_.set (x);
}

const TendonType::elastic_optional& TendonType::
elastic () const
{
  return this->elastic_;
}

TendonType::elastic_optional& TendonType::
elastic ()
{
  return this->elastic_;
}

void TendonType::
elastic (const elastic_type& x)
{
  this->elastic_.set (x);
}

void TendonType::
elastic (const elastic_optional& x)
{
  this->elastic_ = x;
}

void TendonType::
elastic (::std::auto_ptr< elastic_type > x)
{
  this->elastic_.set (x);
}

const TendonType::elasticBiSec_optional& TendonType::
elasticBiSec () const
{
  return this->elasticBiSec_;
}

TendonType::elasticBiSec_optional& TendonType::
elasticBiSec ()
{
  return this->elasticBiSec_;
}

void TendonType::
elasticBiSec (const elasticBiSec_type& x)
{
  this->elasticBiSec_.set (x);
}

void TendonType::
elasticBiSec (const elasticBiSec_optional& x)
{
  this->elasticBiSec_ = x;
}

void TendonType::
elasticBiSec (::std::auto_ptr< elasticBiSec_type > x)
{
  this->elasticBiSec_.set (x);
}


// ActivationElementType
// 


// ActivationType
// 

const ActivationType::exponential_optional& ActivationType::
exponential () const
{
  return this->exponential_;
}

ActivationType::exponential_optional& ActivationType::
exponential ()
{
  return this->exponential_;
}

void ActivationType::
exponential (const exponential_type& x)
{
  this->exponential_.set (x);
}

void ActivationType::
exponential (const exponential_optional& x)
{
  this->exponential_ = x;
}

void ActivationType::
exponential (::std::auto_ptr< exponential_type > x)
{
  this->exponential_.set (x);
}

const ActivationType::piecewise_optional& ActivationType::
piecewise () const
{
  return this->piecewise_;
}

ActivationType::piecewise_optional& ActivationType::
piecewise ()
{
  return this->piecewise_;
}

void ActivationType::
piecewise (const piecewise_type& x)
{
  this->piecewise_.set (x);
}

void ActivationType::
piecewise (const piecewise_optional& x)
{
  this->piecewise_ = x;
}

void ActivationType::
piecewise (::std::auto_ptr< piecewise_type > x)
{
  this->piecewise_.set (x);
}


// SimulatedAnnealingType
// 

const SimulatedAnnealingType::noEpsilon_type& SimulatedAnnealingType::
noEpsilon () const
{
  return this->noEpsilon_.get ();
}

SimulatedAnnealingType::noEpsilon_type& SimulatedAnnealingType::
noEpsilon ()
{
  return this->noEpsilon_.get ();
}

void SimulatedAnnealingType::
noEpsilon (const noEpsilon_type& x)
{
  this->noEpsilon_.set (x);
}

const SimulatedAnnealingType::rt_type& SimulatedAnnealingType::
rt () const
{
  return this->rt_.get ();
}

SimulatedAnnealingType::rt_type& SimulatedAnnealingType::
rt ()
{
  return this->rt_.get ();
}

void SimulatedAnnealingType::
rt (const rt_type& x)
{
  this->rt_.set (x);
}

const SimulatedAnnealingType::T_type& SimulatedAnnealingType::
T () const
{
  return this->T_.get ();
}

SimulatedAnnealingType::T_type& SimulatedAnnealingType::
T ()
{
  return this->T_.get ();
}

void SimulatedAnnealingType::
T (const T_type& x)
{
  this->T_.set (x);
}

const SimulatedAnnealingType::NS_type& SimulatedAnnealingType::
NS () const
{
  return this->NS_.get ();
}

SimulatedAnnealingType::NS_type& SimulatedAnnealingType::
NS ()
{
  return this->NS_.get ();
}

void SimulatedAnnealingType::
NS (const NS_type& x)
{
  this->NS_.set (x);
}

const SimulatedAnnealingType::NT_type& SimulatedAnnealingType::
NT () const
{
  return this->NT_.get ();
}

SimulatedAnnealingType::NT_type& SimulatedAnnealingType::
NT ()
{
  return this->NT_.get ();
}

void SimulatedAnnealingType::
NT (const NT_type& x)
{
  this->NT_.set (x);
}

const SimulatedAnnealingType::epsilon_type& SimulatedAnnealingType::
epsilon () const
{
  return this->epsilon_.get ();
}

SimulatedAnnealingType::epsilon_type& SimulatedAnnealingType::
epsilon ()
{
  return this->epsilon_.get ();
}

void SimulatedAnnealingType::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

const SimulatedAnnealingType::maxNoEval_type& SimulatedAnnealingType::
maxNoEval () const
{
  return this->maxNoEval_.get ();
}

SimulatedAnnealingType::maxNoEval_type& SimulatedAnnealingType::
maxNoEval ()
{
  return this->maxNoEval_.get ();
}

void SimulatedAnnealingType::
maxNoEval (const maxNoEval_type& x)
{
  this->maxNoEval_.set (x);
}


// HybridAlgorithmType
// 

const HybridAlgorithmType::simulatedAnnealing_type& HybridAlgorithmType::
simulatedAnnealing () const
{
  return this->simulatedAnnealing_.get ();
}

HybridAlgorithmType::simulatedAnnealing_type& HybridAlgorithmType::
simulatedAnnealing ()
{
  return this->simulatedAnnealing_.get ();
}

void HybridAlgorithmType::
simulatedAnnealing (const simulatedAnnealing_type& x)
{
  this->simulatedAnnealing_.set (x);
}

void HybridAlgorithmType::
simulatedAnnealing (::std::auto_ptr< simulatedAnnealing_type > x)
{
  this->simulatedAnnealing_.set (x);
}


// OpenLoopType
// 


// MuscleListType
//

MuscleListType::
MuscleListType ()
: ::xsd::cxx::tree::list< ::xml_schema::string, char > ( ::xml_schema::flags (0), this)
{
}

MuscleListType::
MuscleListType (size_type n, const ::xml_schema::string& x)
: ::xsd::cxx::tree::list< ::xml_schema::string, char > (n, x, this)
{
}

MuscleListType::
MuscleListType (const MuscleListType& o,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::simple_type (o, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::string, char > (o, f, this)
{
}

// HybridType
// 

const HybridType::alpha_type& HybridType::
alpha () const
{
  return this->alpha_.get ();
}

HybridType::alpha_type& HybridType::
alpha ()
{
  return this->alpha_.get ();
}

void HybridType::
alpha (const alpha_type& x)
{
  this->alpha_.set (x);
}

const HybridType::beta_type& HybridType::
beta () const
{
  return this->beta_.get ();
}

HybridType::beta_type& HybridType::
beta ()
{
  return this->beta_.get ();
}

void HybridType::
beta (const beta_type& x)
{
  this->beta_.set (x);
}

const HybridType::gamma_type& HybridType::
gamma () const
{
  return this->gamma_.get ();
}

HybridType::gamma_type& HybridType::
gamma ()
{
  return this->gamma_.get ();
}

void HybridType::
gamma (const gamma_type& x)
{
  this->gamma_.set (x);
}

const HybridType::trackedMuscles_type& HybridType::
trackedMuscles () const
{
  return this->trackedMuscles_.get ();
}

HybridType::trackedMuscles_type& HybridType::
trackedMuscles ()
{
  return this->trackedMuscles_.get ();
}

void HybridType::
trackedMuscles (const trackedMuscles_type& x)
{
  this->trackedMuscles_.set (x);
}

void HybridType::
trackedMuscles (::std::auto_ptr< trackedMuscles_type > x)
{
  this->trackedMuscles_.set (x);
}

const HybridType::predictedMuscles_type& HybridType::
predictedMuscles () const
{
  return this->predictedMuscles_.get ();
}

HybridType::predictedMuscles_type& HybridType::
predictedMuscles ()
{
  return this->predictedMuscles_.get ();
}

void HybridType::
predictedMuscles (const predictedMuscles_type& x)
{
  this->predictedMuscles_.set (x);
}

void HybridType::
predictedMuscles (::std::auto_ptr< predictedMuscles_type > x)
{
  this->predictedMuscles_.set (x);
}

const HybridType::algorithm_type& HybridType::
algorithm () const
{
  return this->algorithm_.get ();
}

HybridType::algorithm_type& HybridType::
algorithm ()
{
  return this->algorithm_.get ();
}

void HybridType::
algorithm (const algorithm_type& x)
{
  this->algorithm_.set (x);
}

void HybridType::
algorithm (::std::auto_ptr< algorithm_type > x)
{
  this->algorithm_.set (x);
}


// TypeType
// 

const TypeType::openLoop_optional& TypeType::
openLoop () const
{
  return this->openLoop_;
}

TypeType::openLoop_optional& TypeType::
openLoop ()
{
  return this->openLoop_;
}

void TypeType::
openLoop (const openLoop_type& x)
{
  this->openLoop_.set (x);
}

void TypeType::
openLoop (const openLoop_optional& x)
{
  this->openLoop_ = x;
}

void TypeType::
openLoop (::std::auto_ptr< openLoop_type > x)
{
  this->openLoop_.set (x);
}

const TypeType::hybrid_optional& TypeType::
hybrid () const
{
  return this->hybrid_;
}

TypeType::hybrid_optional& TypeType::
hybrid ()
{
  return this->hybrid_;
}

void TypeType::
hybrid (const hybrid_type& x)
{
  this->hybrid_.set (x);
}

void TypeType::
hybrid (const hybrid_optional& x)
{
  this->hybrid_ = x;
}

void TypeType::
hybrid (::std::auto_ptr< hybrid_type > x)
{
  this->hybrid_.set (x);
}


// NMSModelType
// 

const NMSModelType::type_type& NMSModelType::
type () const
{
  return this->type_.get ();
}

NMSModelType::type_type& NMSModelType::
type ()
{
  return this->type_.get ();
}

void NMSModelType::
type (const type_type& x)
{
  this->type_.set (x);
}

void NMSModelType::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

const NMSModelType::tendon_type& NMSModelType::
tendon () const
{
  return this->tendon_.get ();
}

NMSModelType::tendon_type& NMSModelType::
tendon ()
{
  return this->tendon_.get ();
}

void NMSModelType::
tendon (const tendon_type& x)
{
  this->tendon_.set (x);
}

void NMSModelType::
tendon (::std::auto_ptr< tendon_type > x)
{
  this->tendon_.set (x);
}

const NMSModelType::activation_type& NMSModelType::
activation () const
{
  return this->activation_.get ();
}

NMSModelType::activation_type& NMSModelType::
activation ()
{
  return this->activation_.get ();
}

void NMSModelType::
activation (const activation_type& x)
{
  this->activation_.set (x);
}

void NMSModelType::
activation (::std::auto_ptr< activation_type > x)
{
  this->activation_.set (x);
}


// ElaboratedDoFsType
//

ElaboratedDoFsType::
ElaboratedDoFsType ()
: ::xsd::cxx::tree::list< ::xml_schema::string, char > ( ::xml_schema::flags (0), this)
{
}

ElaboratedDoFsType::
ElaboratedDoFsType (size_type n, const ::xml_schema::string& x)
: ::xsd::cxx::tree::list< ::xml_schema::string, char > (n, x, this)
{
}

ElaboratedDoFsType::
ElaboratedDoFsType (const ElaboratedDoFsType& o,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::simple_type (o, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::string, char > (o, f, this)
{
}

// ExecutionElementType
// 


// FileType
// 


// LoggingType
// 

const LoggingType::txt_optional& LoggingType::
txt () const
{
  return this->txt_;
}

LoggingType::txt_optional& LoggingType::
txt ()
{
  return this->txt_;
}

void LoggingType::
txt (const txt_type& x)
{
  this->txt_.set (x);
}

void LoggingType::
txt (const txt_optional& x)
{
  this->txt_ = x;
}

void LoggingType::
txt (::std::auto_ptr< txt_type > x)
{
  this->txt_.set (x);
}

const LoggingType::csv_optional& LoggingType::
csv () const
{
  return this->csv_;
}

LoggingType::csv_optional& LoggingType::
csv ()
{
  return this->csv_;
}

void LoggingType::
csv (const csv_type& x)
{
  this->csv_.set (x);
}

void LoggingType::
csv (const csv_optional& x)
{
  this->csv_ = x;
}

void LoggingType::
csv (::std::auto_ptr< csv_type > x)
{
  this->csv_.set (x);
}

const LoggingType::mot_optional& LoggingType::
mot () const
{
  return this->mot_;
}

LoggingType::mot_optional& LoggingType::
mot ()
{
  return this->mot_;
}

void LoggingType::
mot (const mot_type& x)
{
  this->mot_.set (x);
}

void LoggingType::
mot (const mot_optional& x)
{
  this->mot_ = x;
}

void LoggingType::
mot (::std::auto_ptr< mot_type > x)
{
  this->mot_.set (x);
}


// ExecutionType
// 

const ExecutionType::NMSmodel_type& ExecutionType::
NMSmodel () const
{
  return this->NMSmodel_.get ();
}

ExecutionType::NMSmodel_type& ExecutionType::
NMSmodel ()
{
  return this->NMSmodel_.get ();
}

void ExecutionType::
NMSmodel (const NMSmodel_type& x)
{
  this->NMSmodel_.set (x);
}

void ExecutionType::
NMSmodel (::std::auto_ptr< NMSmodel_type > x)
{
  this->NMSmodel_.set (x);
}

const ExecutionType::online_optional& ExecutionType::
online () const
{
  return this->online_;
}

ExecutionType::online_optional& ExecutionType::
online ()
{
  return this->online_;
}

void ExecutionType::
online (const online_type& x)
{
  this->online_.set (x);
}

void ExecutionType::
online (const online_optional& x)
{
  this->online_ = x;
}

void ExecutionType::
online (::std::auto_ptr< online_type > x)
{
  this->online_.set (x);
}

const ExecutionType::offline_optional& ExecutionType::
offline () const
{
  return this->offline_;
}

ExecutionType::offline_optional& ExecutionType::
offline ()
{
  return this->offline_;
}

void ExecutionType::
offline (const offline_type& x)
{
  this->offline_.set (x);
}

void ExecutionType::
offline (const offline_optional& x)
{
  this->offline_ = x;
}

void ExecutionType::
offline (::std::auto_ptr< offline_type > x)
{
  this->offline_.set (x);
}

const ExecutionType::samplingFrequency_optional& ExecutionType::
samplingFrequency () const
{
  return this->samplingFrequency_;
}

ExecutionType::samplingFrequency_optional& ExecutionType::
samplingFrequency ()
{
  return this->samplingFrequency_;
}

void ExecutionType::
samplingFrequency (const samplingFrequency_type& x)
{
  this->samplingFrequency_.set (x);
}

void ExecutionType::
samplingFrequency (const samplingFrequency_optional& x)
{
  this->samplingFrequency_ = x;
}

const ExecutionType::elaboratedDoFs_type& ExecutionType::
elaboratedDoFs () const
{
  return this->elaboratedDoFs_.get ();
}

ExecutionType::elaboratedDoFs_type& ExecutionType::
elaboratedDoFs ()
{
  return this->elaboratedDoFs_.get ();
}

void ExecutionType::
elaboratedDoFs (const elaboratedDoFs_type& x)
{
  this->elaboratedDoFs_.set (x);
}

void ExecutionType::
elaboratedDoFs (::std::auto_ptr< elaboratedDoFs_type > x)
{
  this->elaboratedDoFs_.set (x);
}

const ExecutionType::logging_type& ExecutionType::
logging () const
{
  return this->logging_.get ();
}

ExecutionType::logging_type& ExecutionType::
logging ()
{
  return this->logging_.get ();
}

void ExecutionType::
logging (const logging_type& x)
{
  this->logging_.set (x);
}

void ExecutionType::
logging (::std::auto_ptr< logging_type > x)
{
  this->logging_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// TendonElementType
//

TendonElementType::
TendonElementType ()
: ::xml_schema::type ()
{
}

TendonElementType::
TendonElementType (const TendonElementType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (x, f, c)
{
}

TendonElementType::
TendonElementType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (e, f, c)
{
}

TendonElementType::
TendonElementType (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (a, f, c)
{
}

TendonElementType::
TendonElementType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (s, e, f, c)
{
}

TendonElementType* TendonElementType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class TendonElementType (*this, f, c);
}

TendonElementType::
~TendonElementType ()
{
}

// TendonType
//

TendonType::
TendonType ()
: ::xml_schema::type (),
  stiff_ (::xml_schema::flags (), this),
  elastic_ (::xml_schema::flags (), this),
  elasticBiSec_ (::xml_schema::flags (), this)
{
}

TendonType::
TendonType (const TendonType& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  stiff_ (x.stiff_, f, this),
  elastic_ (x.elastic_, f, this),
  elasticBiSec_ (x.elasticBiSec_, f, this)
{
}

TendonType::
TendonType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  stiff_ (f, this),
  elastic_ (f, this),
  elasticBiSec_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void TendonType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // stiff
    //
    if (n.name () == "stiff" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< stiff_type > r (
        stiff_traits::create (i, f, this));

      if (!this->stiff_)
      {
        this->stiff_.set (r);
        continue;
      }
    }

    // elastic
    //
    if (n.name () == "elastic" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< elastic_type > r (
        elastic_traits::create (i, f, this));

      if (!this->elastic_)
      {
        this->elastic_.set (r);
        continue;
      }
    }

    // elasticBiSec
    //
    if (n.name () == "elasticBiSec" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< elasticBiSec_type > r (
        elasticBiSec_traits::create (i, f, this));

      if (!this->elasticBiSec_)
      {
        this->elasticBiSec_.set (r);
        continue;
      }
    }

    break;
  }
}

TendonType* TendonType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class TendonType (*this, f, c);
}

TendonType::
~TendonType ()
{
}

// ActivationElementType
//

ActivationElementType::
ActivationElementType ()
: ::xml_schema::type ()
{
}

ActivationElementType::
ActivationElementType (const ActivationElementType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c)
{
}

ActivationElementType::
ActivationElementType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::type (e, f, c)
{
}

ActivationElementType::
ActivationElementType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::type (a, f, c)
{
}

ActivationElementType::
ActivationElementType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::type (s, e, f, c)
{
}

ActivationElementType* ActivationElementType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ActivationElementType (*this, f, c);
}

ActivationElementType::
~ActivationElementType ()
{
}

// ActivationType
//

ActivationType::
ActivationType ()
: ::xml_schema::type (),
  exponential_ (::xml_schema::flags (), this),
  piecewise_ (::xml_schema::flags (), this)
{
}

ActivationType::
ActivationType (const ActivationType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  exponential_ (x.exponential_, f, this),
  piecewise_ (x.piecewise_, f, this)
{
}

ActivationType::
ActivationType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  exponential_ (f, this),
  piecewise_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void ActivationType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // exponential
    //
    if (n.name () == "exponential" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< exponential_type > r (
        exponential_traits::create (i, f, this));

      if (!this->exponential_)
      {
        this->exponential_.set (r);
        continue;
      }
    }

    // piecewise
    //
    if (n.name () == "piecewise" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< piecewise_type > r (
        piecewise_traits::create (i, f, this));

      if (!this->piecewise_)
      {
        this->piecewise_.set (r);
        continue;
      }
    }

    break;
  }
}

ActivationType* ActivationType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ActivationType (*this, f, c);
}

ActivationType::
~ActivationType ()
{
}

// SimulatedAnnealingType
//

SimulatedAnnealingType::
SimulatedAnnealingType (const noEpsilon_type& noEpsilon,
                        const rt_type& rt,
                        const T_type& T,
                        const NS_type& NS,
                        const NT_type& NT,
                        const epsilon_type& epsilon,
                        const maxNoEval_type& maxNoEval)
: ::xml_schema::type (),
  noEpsilon_ (noEpsilon, ::xml_schema::flags (), this),
  rt_ (rt, ::xml_schema::flags (), this),
  T_ (T, ::xml_schema::flags (), this),
  NS_ (NS, ::xml_schema::flags (), this),
  NT_ (NT, ::xml_schema::flags (), this),
  epsilon_ (epsilon, ::xml_schema::flags (), this),
  maxNoEval_ (maxNoEval, ::xml_schema::flags (), this)
{
}

SimulatedAnnealingType::
SimulatedAnnealingType (const SimulatedAnnealingType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  noEpsilon_ (x.noEpsilon_, f, this),
  rt_ (x.rt_, f, this),
  T_ (x.T_, f, this),
  NS_ (x.NS_, f, this),
  NT_ (x.NT_, f, this),
  epsilon_ (x.epsilon_, f, this),
  maxNoEval_ (x.maxNoEval_, f, this)
{
}

SimulatedAnnealingType::
SimulatedAnnealingType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  noEpsilon_ (f, this),
  rt_ (f, this),
  T_ (f, this),
  NS_ (f, this),
  NT_ (f, this),
  epsilon_ (f, this),
  maxNoEval_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void SimulatedAnnealingType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // noEpsilon
    //
    if (n.name () == "noEpsilon" && n.namespace_ ().empty ())
    {
      if (!noEpsilon_.present ())
      {
        this->noEpsilon_.set (noEpsilon_traits::create (i, f, this));
        continue;
      }
    }

    // rt
    //
    if (n.name () == "rt" && n.namespace_ ().empty ())
    {
      if (!rt_.present ())
      {
        this->rt_.set (rt_traits::create (i, f, this));
        continue;
      }
    }

    // T
    //
    if (n.name () == "T" && n.namespace_ ().empty ())
    {
      if (!T_.present ())
      {
        this->T_.set (T_traits::create (i, f, this));
        continue;
      }
    }

    // NS
    //
    if (n.name () == "NS" && n.namespace_ ().empty ())
    {
      if (!NS_.present ())
      {
        this->NS_.set (NS_traits::create (i, f, this));
        continue;
      }
    }

    // NT
    //
    if (n.name () == "NT" && n.namespace_ ().empty ())
    {
      if (!NT_.present ())
      {
        this->NT_.set (NT_traits::create (i, f, this));
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!epsilon_.present ())
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // maxNoEval
    //
    if (n.name () == "maxNoEval" && n.namespace_ ().empty ())
    {
      if (!maxNoEval_.present ())
      {
        this->maxNoEval_.set (maxNoEval_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!noEpsilon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "noEpsilon",
      "");
  }

  if (!rt_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "rt",
      "");
  }

  if (!T_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "T",
      "");
  }

  if (!NS_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "NS",
      "");
  }

  if (!NT_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "NT",
      "");
  }

  if (!epsilon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "epsilon",
      "");
  }

  if (!maxNoEval_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "maxNoEval",
      "");
  }
}

SimulatedAnnealingType* SimulatedAnnealingType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class SimulatedAnnealingType (*this, f, c);
}

SimulatedAnnealingType::
~SimulatedAnnealingType ()
{
}

// HybridAlgorithmType
//

HybridAlgorithmType::
HybridAlgorithmType (const simulatedAnnealing_type& simulatedAnnealing)
: ::xml_schema::type (),
  simulatedAnnealing_ (simulatedAnnealing, ::xml_schema::flags (), this)
{
}

HybridAlgorithmType::
HybridAlgorithmType (::std::auto_ptr< simulatedAnnealing_type >& simulatedAnnealing)
: ::xml_schema::type (),
  simulatedAnnealing_ (simulatedAnnealing, ::xml_schema::flags (), this)
{
}

HybridAlgorithmType::
HybridAlgorithmType (const HybridAlgorithmType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  simulatedAnnealing_ (x.simulatedAnnealing_, f, this)
{
}

HybridAlgorithmType::
HybridAlgorithmType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  simulatedAnnealing_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void HybridAlgorithmType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // simulatedAnnealing
    //
    if (n.name () == "simulatedAnnealing" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< simulatedAnnealing_type > r (
        simulatedAnnealing_traits::create (i, f, this));

      if (!simulatedAnnealing_.present ())
      {
        this->simulatedAnnealing_.set (r);
        continue;
      }
    }

    break;
  }

  if (!simulatedAnnealing_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "simulatedAnnealing",
      "");
  }
}

HybridAlgorithmType* HybridAlgorithmType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class HybridAlgorithmType (*this, f, c);
}

HybridAlgorithmType::
~HybridAlgorithmType ()
{
}

// OpenLoopType
//

OpenLoopType::
OpenLoopType ()
: ::xml_schema::type ()
{
}

OpenLoopType::
OpenLoopType (const OpenLoopType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c)
{
}

OpenLoopType::
OpenLoopType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f, c)
{
}

OpenLoopType::
OpenLoopType (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (a, f, c)
{
}

OpenLoopType::
OpenLoopType (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (s, e, f, c)
{
}

OpenLoopType* OpenLoopType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class OpenLoopType (*this, f, c);
}

OpenLoopType::
~OpenLoopType ()
{
}

// MuscleListType
//

MuscleListType::
MuscleListType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::simple_type (e, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::string, char > (e, f, this)
{
}

MuscleListType::
MuscleListType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::simple_type (a, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::string, char > (a, f, this)
{
}

MuscleListType::
MuscleListType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::simple_type (s, e, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::string, char > (s, e, f, this)
{
}

MuscleListType* MuscleListType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class MuscleListType (*this, f, c);
}

MuscleListType::
~MuscleListType ()
{
}

// HybridType
//

HybridType::
HybridType (const alpha_type& alpha,
            const beta_type& beta,
            const gamma_type& gamma,
            const trackedMuscles_type& trackedMuscles,
            const predictedMuscles_type& predictedMuscles,
            const algorithm_type& algorithm)
: ::xml_schema::type (),
  alpha_ (alpha, ::xml_schema::flags (), this),
  beta_ (beta, ::xml_schema::flags (), this),
  gamma_ (gamma, ::xml_schema::flags (), this),
  trackedMuscles_ (trackedMuscles, ::xml_schema::flags (), this),
  predictedMuscles_ (predictedMuscles, ::xml_schema::flags (), this),
  algorithm_ (algorithm, ::xml_schema::flags (), this)
{
}

HybridType::
HybridType (const alpha_type& alpha,
            const beta_type& beta,
            const gamma_type& gamma,
            const trackedMuscles_type& trackedMuscles,
            const predictedMuscles_type& predictedMuscles,
            ::std::auto_ptr< algorithm_type >& algorithm)
: ::xml_schema::type (),
  alpha_ (alpha, ::xml_schema::flags (), this),
  beta_ (beta, ::xml_schema::flags (), this),
  gamma_ (gamma, ::xml_schema::flags (), this),
  trackedMuscles_ (trackedMuscles, ::xml_schema::flags (), this),
  predictedMuscles_ (predictedMuscles, ::xml_schema::flags (), this),
  algorithm_ (algorithm, ::xml_schema::flags (), this)
{
}

HybridType::
HybridType (const HybridType& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  alpha_ (x.alpha_, f, this),
  beta_ (x.beta_, f, this),
  gamma_ (x.gamma_, f, this),
  trackedMuscles_ (x.trackedMuscles_, f, this),
  predictedMuscles_ (x.predictedMuscles_, f, this),
  algorithm_ (x.algorithm_, f, this)
{
}

HybridType::
HybridType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  alpha_ (f, this),
  beta_ (f, this),
  gamma_ (f, this),
  trackedMuscles_ (f, this),
  predictedMuscles_ (f, this),
  algorithm_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void HybridType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // alpha
    //
    if (n.name () == "alpha" && n.namespace_ ().empty ())
    {
      if (!alpha_.present ())
      {
        this->alpha_.set (alpha_traits::create (i, f, this));
        continue;
      }
    }

    // beta
    //
    if (n.name () == "beta" && n.namespace_ ().empty ())
    {
      if (!beta_.present ())
      {
        this->beta_.set (beta_traits::create (i, f, this));
        continue;
      }
    }

    // gamma
    //
    if (n.name () == "gamma" && n.namespace_ ().empty ())
    {
      if (!gamma_.present ())
      {
        this->gamma_.set (gamma_traits::create (i, f, this));
        continue;
      }
    }

    // trackedMuscles
    //
    if (n.name () == "trackedMuscles" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< trackedMuscles_type > r (
        trackedMuscles_traits::create (i, f, this));

      if (!trackedMuscles_.present ())
      {
        this->trackedMuscles_.set (r);
        continue;
      }
    }

    // predictedMuscles
    //
    if (n.name () == "predictedMuscles" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< predictedMuscles_type > r (
        predictedMuscles_traits::create (i, f, this));

      if (!predictedMuscles_.present ())
      {
        this->predictedMuscles_.set (r);
        continue;
      }
    }

    // algorithm
    //
    if (n.name () == "algorithm" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< algorithm_type > r (
        algorithm_traits::create (i, f, this));

      if (!algorithm_.present ())
      {
        this->algorithm_.set (r);
        continue;
      }
    }

    break;
  }

  if (!alpha_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "alpha",
      "");
  }

  if (!beta_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beta",
      "");
  }

  if (!gamma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "gamma",
      "");
  }

  if (!trackedMuscles_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "trackedMuscles",
      "");
  }

  if (!predictedMuscles_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "predictedMuscles",
      "");
  }

  if (!algorithm_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "algorithm",
      "");
  }
}

HybridType* HybridType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class HybridType (*this, f, c);
}

HybridType::
~HybridType ()
{
}

// TypeType
//

TypeType::
TypeType ()
: ::xml_schema::type (),
  openLoop_ (::xml_schema::flags (), this),
  hybrid_ (::xml_schema::flags (), this)
{
}

TypeType::
TypeType (const TypeType& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  openLoop_ (x.openLoop_, f, this),
  hybrid_ (x.hybrid_, f, this)
{
}

TypeType::
TypeType (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  openLoop_ (f, this),
  hybrid_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void TypeType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // openLoop
    //
    if (n.name () == "openLoop" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< openLoop_type > r (
        openLoop_traits::create (i, f, this));

      if (!this->openLoop_)
      {
        this->openLoop_.set (r);
        continue;
      }
    }

    // hybrid
    //
    if (n.name () == "hybrid" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< hybrid_type > r (
        hybrid_traits::create (i, f, this));

      if (!this->hybrid_)
      {
        this->hybrid_.set (r);
        continue;
      }
    }

    break;
  }
}

TypeType* TypeType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class TypeType (*this, f, c);
}

TypeType::
~TypeType ()
{
}

// NMSModelType
//

NMSModelType::
NMSModelType (const type_type& type,
              const tendon_type& tendon,
              const activation_type& activation)
: ::xml_schema::type (),
  type_ (type, ::xml_schema::flags (), this),
  tendon_ (tendon, ::xml_schema::flags (), this),
  activation_ (activation, ::xml_schema::flags (), this)
{
}

NMSModelType::
NMSModelType (::std::auto_ptr< type_type >& type,
              ::std::auto_ptr< tendon_type >& tendon,
              ::std::auto_ptr< activation_type >& activation)
: ::xml_schema::type (),
  type_ (type, ::xml_schema::flags (), this),
  tendon_ (tendon, ::xml_schema::flags (), this),
  activation_ (activation, ::xml_schema::flags (), this)
{
}

NMSModelType::
NMSModelType (const NMSModelType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  type_ (x.type_, f, this),
  tendon_ (x.tendon_, f, this),
  activation_ (x.activation_, f, this)
{
}

NMSModelType::
NMSModelType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  type_ (f, this),
  tendon_ (f, this),
  activation_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void NMSModelType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< type_type > r (
        type_traits::create (i, f, this));

      if (!type_.present ())
      {
        this->type_.set (r);
        continue;
      }
    }

    // tendon
    //
    if (n.name () == "tendon" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< tendon_type > r (
        tendon_traits::create (i, f, this));

      if (!tendon_.present ())
      {
        this->tendon_.set (r);
        continue;
      }
    }

    // activation
    //
    if (n.name () == "activation" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< activation_type > r (
        activation_traits::create (i, f, this));

      if (!activation_.present ())
      {
        this->activation_.set (r);
        continue;
      }
    }

    break;
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }

  if (!tendon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "tendon",
      "");
  }

  if (!activation_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "activation",
      "");
  }
}

NMSModelType* NMSModelType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class NMSModelType (*this, f, c);
}

NMSModelType::
~NMSModelType ()
{
}

// ElaboratedDoFsType
//

ElaboratedDoFsType::
ElaboratedDoFsType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::simple_type (e, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::string, char > (e, f, this)
{
}

ElaboratedDoFsType::
ElaboratedDoFsType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::simple_type (a, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::string, char > (a, f, this)
{
}

ElaboratedDoFsType::
ElaboratedDoFsType (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::simple_type (s, e, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::string, char > (s, e, f, this)
{
}

ElaboratedDoFsType* ElaboratedDoFsType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ElaboratedDoFsType (*this, f, c);
}

ElaboratedDoFsType::
~ElaboratedDoFsType ()
{
}

// ExecutionElementType
//

ExecutionElementType::
ExecutionElementType ()
: ::xml_schema::type ()
{
}

ExecutionElementType::
ExecutionElementType (const ExecutionElementType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c)
{
}

ExecutionElementType::
ExecutionElementType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (e, f, c)
{
}

ExecutionElementType::
ExecutionElementType (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (a, f, c)
{
}

ExecutionElementType::
ExecutionElementType (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (s, e, f, c)
{
}

ExecutionElementType* ExecutionElementType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ExecutionElementType (*this, f, c);
}

ExecutionElementType::
~ExecutionElementType ()
{
}

// FileType
//

FileType::
FileType ()
: ::xml_schema::type ()
{
}

FileType::
FileType (const FileType& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c)
{
}

FileType::
FileType (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f, c)
{
}

FileType::
FileType (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (a, f, c)
{
}

FileType::
FileType (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (s, e, f, c)
{
}

FileType* FileType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class FileType (*this, f, c);
}

FileType::
~FileType ()
{
}

// LoggingType
//

LoggingType::
LoggingType ()
: ::xml_schema::type (),
  txt_ (::xml_schema::flags (), this),
  csv_ (::xml_schema::flags (), this),
  mot_ (::xml_schema::flags (), this)
{
}

LoggingType::
LoggingType (const LoggingType& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  txt_ (x.txt_, f, this),
  csv_ (x.csv_, f, this),
  mot_ (x.mot_, f, this)
{
}

LoggingType::
LoggingType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  txt_ (f, this),
  csv_ (f, this),
  mot_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void LoggingType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // txt
    //
    if (n.name () == "txt" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< txt_type > r (
        txt_traits::create (i, f, this));

      if (!this->txt_)
      {
        this->txt_.set (r);
        continue;
      }
    }

    // csv
    //
    if (n.name () == "csv" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< csv_type > r (
        csv_traits::create (i, f, this));

      if (!this->csv_)
      {
        this->csv_.set (r);
        continue;
      }
    }

    // mot
    //
    if (n.name () == "mot" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< mot_type > r (
        mot_traits::create (i, f, this));

      if (!this->mot_)
      {
        this->mot_.set (r);
        continue;
      }
    }

    break;
  }
}

LoggingType* LoggingType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class LoggingType (*this, f, c);
}

LoggingType::
~LoggingType ()
{
}

// ExecutionType
//

ExecutionType::
ExecutionType (const NMSmodel_type& NMSmodel,
               const elaboratedDoFs_type& elaboratedDoFs,
               const logging_type& logging)
: ::xml_schema::type (),
  NMSmodel_ (NMSmodel, ::xml_schema::flags (), this),
  online_ (::xml_schema::flags (), this),
  offline_ (::xml_schema::flags (), this),
  samplingFrequency_ (::xml_schema::flags (), this),
  elaboratedDoFs_ (elaboratedDoFs, ::xml_schema::flags (), this),
  logging_ (logging, ::xml_schema::flags (), this)
{
}

ExecutionType::
ExecutionType (::std::auto_ptr< NMSmodel_type >& NMSmodel,
               const elaboratedDoFs_type& elaboratedDoFs,
               ::std::auto_ptr< logging_type >& logging)
: ::xml_schema::type (),
  NMSmodel_ (NMSmodel, ::xml_schema::flags (), this),
  online_ (::xml_schema::flags (), this),
  offline_ (::xml_schema::flags (), this),
  samplingFrequency_ (::xml_schema::flags (), this),
  elaboratedDoFs_ (elaboratedDoFs, ::xml_schema::flags (), this),
  logging_ (logging, ::xml_schema::flags (), this)
{
}

ExecutionType::
ExecutionType (const ExecutionType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  NMSmodel_ (x.NMSmodel_, f, this),
  online_ (x.online_, f, this),
  offline_ (x.offline_, f, this),
  samplingFrequency_ (x.samplingFrequency_, f, this),
  elaboratedDoFs_ (x.elaboratedDoFs_, f, this),
  logging_ (x.logging_, f, this)
{
}

ExecutionType::
ExecutionType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  NMSmodel_ (f, this),
  online_ (f, this),
  offline_ (f, this),
  samplingFrequency_ (f, this),
  elaboratedDoFs_ (f, this),
  logging_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void ExecutionType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // NMSmodel
    //
    if (n.name () == "NMSmodel" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< NMSmodel_type > r (
        NMSmodel_traits::create (i, f, this));

      if (!NMSmodel_.present ())
      {
        this->NMSmodel_.set (r);
        continue;
      }
    }

    // online
    //
    if (n.name () == "online" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< online_type > r (
        online_traits::create (i, f, this));

      if (!this->online_)
      {
        this->online_.set (r);
        continue;
      }
    }

    // offline
    //
    if (n.name () == "offline" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< offline_type > r (
        offline_traits::create (i, f, this));

      if (!this->offline_)
      {
        this->offline_.set (r);
        continue;
      }
    }

    // samplingFrequency
    //
    if (n.name () == "samplingFrequency" && n.namespace_ ().empty ())
    {
      if (!this->samplingFrequency_)
      {
        this->samplingFrequency_.set (samplingFrequency_traits::create (i, f, this));
        continue;
      }
    }

    // elaboratedDoFs
    //
    if (n.name () == "elaboratedDoFs" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< elaboratedDoFs_type > r (
        elaboratedDoFs_traits::create (i, f, this));

      if (!elaboratedDoFs_.present ())
      {
        this->elaboratedDoFs_.set (r);
        continue;
      }
    }

    // logging
    //
    if (n.name () == "logging" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< logging_type > r (
        logging_traits::create (i, f, this));

      if (!logging_.present ())
      {
        this->logging_.set (r);
        continue;
      }
    }

    break;
  }

  if (!NMSmodel_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "NMSmodel",
      "");
  }

  if (!elaboratedDoFs_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "elaboratedDoFs",
      "");
  }

  if (!logging_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "logging",
      "");
  }
}

ExecutionType* ExecutionType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ExecutionType (*this, f, c);
}

ExecutionType::
~ExecutionType ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::ExecutionType >
execution (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::ExecutionType > r (
    ::execution (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::ExecutionType >
execution (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::ExecutionType > r (
    ::execution (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::ExecutionType >
execution (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::ExecutionType > r (
    ::execution (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::ExecutionType >
execution (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::execution (isrc, f, p);
}

::std::auto_ptr< ::ExecutionType >
execution (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::execution (isrc, h, f, p);
}

::std::auto_ptr< ::ExecutionType >
execution (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::execution (isrc, h, f, p);
}

::std::auto_ptr< ::ExecutionType >
execution (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::execution (isrc, f, p);
}

::std::auto_ptr< ::ExecutionType >
execution (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::execution (isrc, h, f, p);
}

::std::auto_ptr< ::ExecutionType >
execution (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::execution (isrc, h, f, p);
}

::std::auto_ptr< ::ExecutionType >
execution (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::ExecutionType > r (
    ::execution (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::ExecutionType >
execution (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::ExecutionType > r (
    ::execution (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::ExecutionType >
execution (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::ExecutionType > r (
    ::execution (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::ExecutionType >
execution (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::ExecutionType > r (
      ::execution (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "execution" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::ExecutionType > r (
      ::xsd::cxx::tree::traits< ::ExecutionType, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "execution",
    "");
}

::std::auto_ptr< ::ExecutionType >
execution (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "execution" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::ExecutionType > r (
      ::xsd::cxx::tree::traits< ::ExecutionType, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "execution",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

