// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_________CFG_XSD_SUBJECT_HXX
#define CXX_________CFG_XSD_SUBJECT_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class MTUType;
class MTUSetType;
class MTUNameSetType;
class DoFType;
class CalibrationSequenceType;
class CalibratedType;
class UncalibratedType;
class CalibrationInfoType;
class DoFSetType;
class PointsSequenceType;
class CurveType;
class MTUDefaultType;
class SubjectType;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class MTUType: public ::xml_schema::type
{
  public:
  // name
  // 
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // emDelay
  // 
  typedef ::xml_schema::double_ emDelay_type;
  typedef ::xsd::cxx::tree::optional< emDelay_type > emDelay_optional;
  typedef ::xsd::cxx::tree::traits< emDelay_type, char, ::xsd::cxx::tree::schema_type::double_ > emDelay_traits;

  const emDelay_optional&
  emDelay () const;

  emDelay_optional&
  emDelay ();

  void
  emDelay (const emDelay_type& x);

  void
  emDelay (const emDelay_optional& x);

  // c1
  // 
  typedef ::xml_schema::double_ c1_type;
  typedef ::xsd::cxx::tree::traits< c1_type, char, ::xsd::cxx::tree::schema_type::double_ > c1_traits;

  const c1_type&
  c1 () const;

  c1_type&
  c1 ();

  void
  c1 (const c1_type& x);

  // c2
  // 
  typedef ::xml_schema::double_ c2_type;
  typedef ::xsd::cxx::tree::traits< c2_type, char, ::xsd::cxx::tree::schema_type::double_ > c2_traits;

  const c2_type&
  c2 () const;

  c2_type&
  c2 ();

  void
  c2 (const c2_type& x);

  // shapeFactor
  // 
  typedef ::xml_schema::double_ shapeFactor_type;
  typedef ::xsd::cxx::tree::traits< shapeFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > shapeFactor_traits;

  const shapeFactor_type&
  shapeFactor () const;

  shapeFactor_type&
  shapeFactor ();

  void
  shapeFactor (const shapeFactor_type& x);

  // optimalFibreLength
  // 
  typedef ::xml_schema::double_ optimalFibreLength_type;
  typedef ::xsd::cxx::tree::traits< optimalFibreLength_type, char, ::xsd::cxx::tree::schema_type::double_ > optimalFibreLength_traits;

  const optimalFibreLength_type&
  optimalFibreLength () const;

  optimalFibreLength_type&
  optimalFibreLength ();

  void
  optimalFibreLength (const optimalFibreLength_type& x);

  // pennationAngle
  // 
  typedef ::xml_schema::double_ pennationAngle_type;
  typedef ::xsd::cxx::tree::traits< pennationAngle_type, char, ::xsd::cxx::tree::schema_type::double_ > pennationAngle_traits;

  const pennationAngle_type&
  pennationAngle () const;

  pennationAngle_type&
  pennationAngle ();

  void
  pennationAngle (const pennationAngle_type& x);

  // tendonSlackLength
  // 
  typedef ::xml_schema::double_ tendonSlackLength_type;
  typedef ::xsd::cxx::tree::traits< tendonSlackLength_type, char, ::xsd::cxx::tree::schema_type::double_ > tendonSlackLength_traits;

  const tendonSlackLength_type&
  tendonSlackLength () const;

  tendonSlackLength_type&
  tendonSlackLength ();

  void
  tendonSlackLength (const tendonSlackLength_type& x);

  // maxIsometricForce
  // 
  typedef ::xml_schema::double_ maxIsometricForce_type;
  typedef ::xsd::cxx::tree::traits< maxIsometricForce_type, char, ::xsd::cxx::tree::schema_type::double_ > maxIsometricForce_traits;

  const maxIsometricForce_type&
  maxIsometricForce () const;

  maxIsometricForce_type&
  maxIsometricForce ();

  void
  maxIsometricForce (const maxIsometricForce_type& x);

  // strengthCoefficient
  // 
  typedef ::xml_schema::double_ strengthCoefficient_type;
  typedef ::xsd::cxx::tree::traits< strengthCoefficient_type, char, ::xsd::cxx::tree::schema_type::double_ > strengthCoefficient_traits;

  const strengthCoefficient_type&
  strengthCoefficient () const;

  strengthCoefficient_type&
  strengthCoefficient ();

  void
  strengthCoefficient (const strengthCoefficient_type& x);

  // Constructors.
  //
  MTUType (const name_type&,
           const c1_type&,
           const c2_type&,
           const shapeFactor_type&,
           const optimalFibreLength_type&,
           const pennationAngle_type&,
           const tendonSlackLength_type&,
           const maxIsometricForce_type&,
           const strengthCoefficient_type&);

  MTUType (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MTUType (const MTUType& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual MTUType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MTUType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
  emDelay_optional emDelay_;
  ::xsd::cxx::tree::one< c1_type > c1_;
  ::xsd::cxx::tree::one< c2_type > c2_;
  ::xsd::cxx::tree::one< shapeFactor_type > shapeFactor_;
  ::xsd::cxx::tree::one< optimalFibreLength_type > optimalFibreLength_;
  ::xsd::cxx::tree::one< pennationAngle_type > pennationAngle_;
  ::xsd::cxx::tree::one< tendonSlackLength_type > tendonSlackLength_;
  ::xsd::cxx::tree::one< maxIsometricForce_type > maxIsometricForce_;
  ::xsd::cxx::tree::one< strengthCoefficient_type > strengthCoefficient_;
};

class MTUSetType: public ::xml_schema::type
{
  public:
  // mtu
  // 
  typedef ::MTUType mtu_type;
  typedef ::xsd::cxx::tree::sequence< mtu_type > mtu_sequence;
  typedef mtu_sequence::iterator mtu_iterator;
  typedef mtu_sequence::const_iterator mtu_const_iterator;
  typedef ::xsd::cxx::tree::traits< mtu_type, char > mtu_traits;

  const mtu_sequence&
  mtu () const;

  mtu_sequence&
  mtu ();

  void
  mtu (const mtu_sequence& s);

  // Constructors.
  //
  MTUSetType ();

  MTUSetType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MTUSetType (const MTUSetType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual MTUSetType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MTUSetType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  mtu_sequence mtu_;
};

class MTUNameSetType: public ::xml_schema::simple_type,
  public ::xsd::cxx::tree::list< ::xml_schema::string, char >
{
  public:
  MTUNameSetType ();

  MTUNameSetType (size_type n, const ::xml_schema::string& x);

  template < typename I >
  MTUNameSetType (const I& begin, const I& end)
  : ::xsd::cxx::tree::list< ::xml_schema::string, char > (begin, end, this)
  {
  }

  MTUNameSetType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  MTUNameSetType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  MTUNameSetType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  MTUNameSetType (const MTUNameSetType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual MTUNameSetType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MTUNameSetType ();
};

class DoFType: public ::xml_schema::type
{
  public:
  // name
  // 
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // mtuNameSet
  // 
  typedef ::MTUNameSetType mtuNameSet_type;
  typedef ::xsd::cxx::tree::traits< mtuNameSet_type, char > mtuNameSet_traits;

  const mtuNameSet_type&
  mtuNameSet () const;

  mtuNameSet_type&
  mtuNameSet ();

  void
  mtuNameSet (const mtuNameSet_type& x);

  void
  mtuNameSet (::std::auto_ptr< mtuNameSet_type > p);

  // Constructors.
  //
  DoFType (const name_type&,
           const mtuNameSet_type&);

  DoFType (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  DoFType (const DoFType& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual DoFType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~DoFType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< mtuNameSet_type > mtuNameSet_;
};

class CalibrationSequenceType: public ::xml_schema::simple_type,
  public ::xsd::cxx::tree::list< ::xml_schema::string, char >
{
  public:
  CalibrationSequenceType ();

  CalibrationSequenceType (size_type n, const ::xml_schema::string& x);

  template < typename I >
  CalibrationSequenceType (const I& begin, const I& end)
  : ::xsd::cxx::tree::list< ::xml_schema::string, char > (begin, end, this)
  {
  }

  CalibrationSequenceType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  CalibrationSequenceType (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  CalibrationSequenceType (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  CalibrationSequenceType (const CalibrationSequenceType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  virtual CalibrationSequenceType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CalibrationSequenceType ();
};

class CalibratedType: public ::xml_schema::type
{
  public:
  // startSubjectFile
  // 
  typedef ::xml_schema::string startSubjectFile_type;
  typedef ::xsd::cxx::tree::traits< startSubjectFile_type, char > startSubjectFile_traits;

  const startSubjectFile_type&
  startSubjectFile () const;

  startSubjectFile_type&
  startSubjectFile ();

  void
  startSubjectFile (const startSubjectFile_type& x);

  void
  startSubjectFile (::std::auto_ptr< startSubjectFile_type > p);

  // calibrationSequence
  // 
  typedef ::CalibrationSequenceType calibrationSequence_type;
  typedef ::xsd::cxx::tree::traits< calibrationSequence_type, char > calibrationSequence_traits;

  const calibrationSequence_type&
  calibrationSequence () const;

  calibrationSequence_type&
  calibrationSequence ();

  void
  calibrationSequence (const calibrationSequence_type& x);

  void
  calibrationSequence (::std::auto_ptr< calibrationSequence_type > p);

  // Constructors.
  //
  CalibratedType (const startSubjectFile_type&,
                  const calibrationSequence_type&);

  CalibratedType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  CalibratedType (const CalibratedType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual CalibratedType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CalibratedType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< startSubjectFile_type > startSubjectFile_;
  ::xsd::cxx::tree::one< calibrationSequence_type > calibrationSequence_;
};

class UncalibratedType: public ::xml_schema::type
{
  public:
  // subjectID
  // 
  typedef ::xml_schema::string subjectID_type;
  typedef ::xsd::cxx::tree::traits< subjectID_type, char > subjectID_traits;

  const subjectID_type&
  subjectID () const;

  subjectID_type&
  subjectID ();

  void
  subjectID (const subjectID_type& x);

  void
  subjectID (::std::auto_ptr< subjectID_type > p);

  // additionalInfo
  // 
  typedef ::xml_schema::string additionalInfo_type;
  typedef ::xsd::cxx::tree::traits< additionalInfo_type, char > additionalInfo_traits;

  const additionalInfo_type&
  additionalInfo () const;

  additionalInfo_type&
  additionalInfo ();

  void
  additionalInfo (const additionalInfo_type& x);

  void
  additionalInfo (::std::auto_ptr< additionalInfo_type > p);

  // Constructors.
  //
  UncalibratedType (const subjectID_type&,
                    const additionalInfo_type&);

  UncalibratedType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  UncalibratedType (const UncalibratedType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual UncalibratedType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~UncalibratedType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< subjectID_type > subjectID_;
  ::xsd::cxx::tree::one< additionalInfo_type > additionalInfo_;
};

class CalibrationInfoType: public ::xml_schema::type
{
  public:
  // uncalibrated
  // 
  typedef ::UncalibratedType uncalibrated_type;
  typedef ::xsd::cxx::tree::optional< uncalibrated_type > uncalibrated_optional;
  typedef ::xsd::cxx::tree::traits< uncalibrated_type, char > uncalibrated_traits;

  const uncalibrated_optional&
  uncalibrated () const;

  uncalibrated_optional&
  uncalibrated ();

  void
  uncalibrated (const uncalibrated_type& x);

  void
  uncalibrated (const uncalibrated_optional& x);

  void
  uncalibrated (::std::auto_ptr< uncalibrated_type > p);

  // calibrated
  // 
  typedef ::CalibratedType calibrated_type;
  typedef ::xsd::cxx::tree::optional< calibrated_type > calibrated_optional;
  typedef ::xsd::cxx::tree::traits< calibrated_type, char > calibrated_traits;

  const calibrated_optional&
  calibrated () const;

  calibrated_optional&
  calibrated ();

  void
  calibrated (const calibrated_type& x);

  void
  calibrated (const calibrated_optional& x);

  void
  calibrated (::std::auto_ptr< calibrated_type > p);

  // Constructors.
  //
  CalibrationInfoType ();

  CalibrationInfoType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  CalibrationInfoType (const CalibrationInfoType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual CalibrationInfoType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CalibrationInfoType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  uncalibrated_optional uncalibrated_;
  calibrated_optional calibrated_;
};

class DoFSetType: public ::xml_schema::type
{
  public:
  // dof
  // 
  typedef ::DoFType dof_type;
  typedef ::xsd::cxx::tree::sequence< dof_type > dof_sequence;
  typedef dof_sequence::iterator dof_iterator;
  typedef dof_sequence::const_iterator dof_const_iterator;
  typedef ::xsd::cxx::tree::traits< dof_type, char > dof_traits;

  const dof_sequence&
  dof () const;

  dof_sequence&
  dof ();

  void
  dof (const dof_sequence& s);

  // Constructors.
  //
  DoFSetType ();

  DoFSetType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  DoFSetType (const DoFSetType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual DoFSetType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~DoFSetType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  dof_sequence dof_;
};

class PointsSequenceType: public ::xml_schema::simple_type,
  public ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >
{
  public:
  PointsSequenceType ();

  PointsSequenceType (size_type n, const ::xml_schema::double_& x);

  template < typename I >
  PointsSequenceType (const I& begin, const I& end)
  : ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ > (begin, end, this)
  {
  }

  PointsSequenceType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  PointsSequenceType (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  PointsSequenceType (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  PointsSequenceType (const PointsSequenceType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual PointsSequenceType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PointsSequenceType ();
};

class CurveType: public ::xml_schema::type
{
  public:
  // name
  // 
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // xPoints
  // 
  typedef ::PointsSequenceType xPoints_type;
  typedef ::xsd::cxx::tree::traits< xPoints_type, char > xPoints_traits;

  const xPoints_type&
  xPoints () const;

  xPoints_type&
  xPoints ();

  void
  xPoints (const xPoints_type& x);

  void
  xPoints (::std::auto_ptr< xPoints_type > p);

  // yPoints
  // 
  typedef ::PointsSequenceType yPoints_type;
  typedef ::xsd::cxx::tree::traits< yPoints_type, char > yPoints_traits;

  const yPoints_type&
  yPoints () const;

  yPoints_type&
  yPoints ();

  void
  yPoints (const yPoints_type& x);

  void
  yPoints (::std::auto_ptr< yPoints_type > p);

  // Constructors.
  //
  CurveType (const name_type&,
             const xPoints_type&,
             const yPoints_type&);

  CurveType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  CurveType (const CurveType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual CurveType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CurveType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< xPoints_type > xPoints_;
  ::xsd::cxx::tree::one< yPoints_type > yPoints_;
};

class MTUDefaultType: public ::xml_schema::type
{
  public:
  // emDelay
  // 
  typedef ::xml_schema::double_ emDelay_type;
  typedef ::xsd::cxx::tree::traits< emDelay_type, char, ::xsd::cxx::tree::schema_type::double_ > emDelay_traits;

  const emDelay_type&
  emDelay () const;

  emDelay_type&
  emDelay ();

  void
  emDelay (const emDelay_type& x);

  // percentageChange
  // 
  typedef ::xml_schema::double_ percentageChange_type;
  typedef ::xsd::cxx::tree::traits< percentageChange_type, char, ::xsd::cxx::tree::schema_type::double_ > percentageChange_traits;

  const percentageChange_type&
  percentageChange () const;

  percentageChange_type&
  percentageChange ();

  void
  percentageChange (const percentageChange_type& x);

  // damping
  // 
  typedef ::xml_schema::double_ damping_type;
  typedef ::xsd::cxx::tree::traits< damping_type, char, ::xsd::cxx::tree::schema_type::double_ > damping_traits;

  const damping_type&
  damping () const;

  damping_type&
  damping ();

  void
  damping (const damping_type& x);

  // curve
  // 
  typedef ::CurveType curve_type;
  typedef ::xsd::cxx::tree::sequence< curve_type > curve_sequence;
  typedef curve_sequence::iterator curve_iterator;
  typedef curve_sequence::const_iterator curve_const_iterator;
  typedef ::xsd::cxx::tree::traits< curve_type, char > curve_traits;

  const curve_sequence&
  curve () const;

  curve_sequence&
  curve ();

  void
  curve (const curve_sequence& s);

  // Constructors.
  //
  MTUDefaultType (const emDelay_type&,
                  const percentageChange_type&,
                  const damping_type&);

  MTUDefaultType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  MTUDefaultType (const MTUDefaultType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual MTUDefaultType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MTUDefaultType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< emDelay_type > emDelay_;
  ::xsd::cxx::tree::one< percentageChange_type > percentageChange_;
  ::xsd::cxx::tree::one< damping_type > damping_;
  curve_sequence curve_;
};

class SubjectType: public ::xml_schema::type
{
  public:
  // mtuDefault
  // 
  typedef ::MTUDefaultType mtuDefault_type;
  typedef ::xsd::cxx::tree::traits< mtuDefault_type, char > mtuDefault_traits;

  const mtuDefault_type&
  mtuDefault () const;

  mtuDefault_type&
  mtuDefault ();

  void
  mtuDefault (const mtuDefault_type& x);

  void
  mtuDefault (::std::auto_ptr< mtuDefault_type > p);

  // mtuSet
  // 
  typedef ::MTUSetType mtuSet_type;
  typedef ::xsd::cxx::tree::traits< mtuSet_type, char > mtuSet_traits;

  const mtuSet_type&
  mtuSet () const;

  mtuSet_type&
  mtuSet ();

  void
  mtuSet (const mtuSet_type& x);

  void
  mtuSet (::std::auto_ptr< mtuSet_type > p);

  // dofSet
  // 
  typedef ::DoFSetType dofSet_type;
  typedef ::xsd::cxx::tree::traits< dofSet_type, char > dofSet_traits;

  const dofSet_type&
  dofSet () const;

  dofSet_type&
  dofSet ();

  void
  dofSet (const dofSet_type& x);

  void
  dofSet (::std::auto_ptr< dofSet_type > p);

  // calibrationInfo
  // 
  typedef ::CalibrationInfoType calibrationInfo_type;
  typedef ::xsd::cxx::tree::traits< calibrationInfo_type, char > calibrationInfo_traits;

  const calibrationInfo_type&
  calibrationInfo () const;

  calibrationInfo_type&
  calibrationInfo ();

  void
  calibrationInfo (const calibrationInfo_type& x);

  void
  calibrationInfo (::std::auto_ptr< calibrationInfo_type > p);

  // Constructors.
  //
  SubjectType (const mtuDefault_type&,
               const mtuSet_type&,
               const dofSet_type&,
               const calibrationInfo_type&);

  SubjectType (::std::auto_ptr< mtuDefault_type >&,
               ::std::auto_ptr< mtuSet_type >&,
               ::std::auto_ptr< dofSet_type >&,
               ::std::auto_ptr< calibrationInfo_type >&);

  SubjectType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  SubjectType (const SubjectType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual SubjectType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SubjectType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< mtuDefault_type > mtuDefault_;
  ::xsd::cxx::tree::one< mtuSet_type > mtuSet_;
  ::xsd::cxx::tree::one< dofSet_type > dofSet_;
  ::xsd::cxx::tree::one< calibrationInfo_type > calibrationInfo_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::SubjectType >
subject (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubjectType >
subject (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubjectType >
subject (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::SubjectType >
subject (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubjectType >
subject (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubjectType >
subject (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubjectType >
subject (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubjectType >
subject (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubjectType >
subject (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::SubjectType >
subject (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubjectType >
subject (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubjectType >
subject (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::SubjectType >
subject (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubjectType >
subject (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const MTUType&);

void
operator<< (::xercesc::DOMElement&, const MTUSetType&);

void
operator<< (::xercesc::DOMElement&, const MTUNameSetType&);

void
operator<< (::xercesc::DOMAttr&, const MTUNameSetType&);

void
operator<< (::xml_schema::list_stream&,
            const MTUNameSetType&);

void
operator<< (::xercesc::DOMElement&, const DoFType&);

void
operator<< (::xercesc::DOMElement&, const CalibrationSequenceType&);

void
operator<< (::xercesc::DOMAttr&, const CalibrationSequenceType&);

void
operator<< (::xml_schema::list_stream&,
            const CalibrationSequenceType&);

void
operator<< (::xercesc::DOMElement&, const CalibratedType&);

void
operator<< (::xercesc::DOMElement&, const UncalibratedType&);

void
operator<< (::xercesc::DOMElement&, const CalibrationInfoType&);

void
operator<< (::xercesc::DOMElement&, const DoFSetType&);

void
operator<< (::xercesc::DOMElement&, const PointsSequenceType&);

void
operator<< (::xercesc::DOMAttr&, const PointsSequenceType&);

void
operator<< (::xml_schema::list_stream&,
            const PointsSequenceType&);

void
operator<< (::xercesc::DOMElement&, const CurveType&);

void
operator<< (::xercesc::DOMElement&, const MTUDefaultType&);

void
operator<< (::xercesc::DOMElement&, const SubjectType&);

// Serialize to std::ostream.
//

void
subject (::std::ostream& os,
         const ::SubjectType& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
subject (::std::ostream& os,
         const ::SubjectType& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
subject (::std::ostream& os,
         const ::SubjectType& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
subject (::xercesc::XMLFormatTarget& ft,
         const ::SubjectType& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
subject (::xercesc::XMLFormatTarget& ft,
         const ::SubjectType& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
subject (::xercesc::XMLFormatTarget& ft,
         const ::SubjectType& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
subject (::xercesc::DOMDocument& d,
         const ::SubjectType& x,
         ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
subject (const ::SubjectType& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         ::xml_schema::flags f = 0);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_________CFG_XSD_SUBJECT_HXX
