// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX______CFG_XSD_CALIBRATION_HXX
#define CXX______CFG_XSD_CALIBRATION_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class SimulatedAnnealingType;
class AlgorithmType;
class OpenLoopType;
class TypeType;
class TendonElementType;
class TendonType;
class ActivationElementType;
class ActivationType;
class NMSModelType;
class TrialSetType;
class ObjectiveFunctionElementType;
class ComputationModeElementType;
class GlobalParameterType;
class SingleParameterType;
class ObjectiveFunctionType;
class DoFsType;
class HardCodedParametersSelectionType;
class ComputationModeType;
class TwoDoublesType;
class RangeType;
class MuscleListType;
class MuscleGroupsType;
class ParameterType;
class parameterSetType;
class StepType;
class CalibrationStepsType;
class CalibrationType;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class SimulatedAnnealingType: public ::xml_schema::type
{
  public:
  // noEpsilon
  // 
  typedef ::xml_schema::int_ noEpsilon_type;
  typedef ::xsd::cxx::tree::traits< noEpsilon_type, char > noEpsilon_traits;

  const noEpsilon_type&
  noEpsilon () const;

  noEpsilon_type&
  noEpsilon ();

  void
  noEpsilon (const noEpsilon_type& x);

  // rt
  // 
  typedef ::xml_schema::double_ rt_type;
  typedef ::xsd::cxx::tree::traits< rt_type, char, ::xsd::cxx::tree::schema_type::double_ > rt_traits;

  const rt_type&
  rt () const;

  rt_type&
  rt ();

  void
  rt (const rt_type& x);

  // T
  // 
  typedef ::xml_schema::double_ T_type;
  typedef ::xsd::cxx::tree::traits< T_type, char, ::xsd::cxx::tree::schema_type::double_ > T_traits;

  const T_type&
  T () const;

  T_type&
  T ();

  void
  T (const T_type& x);

  // NS
  // 
  typedef ::xml_schema::int_ NS_type;
  typedef ::xsd::cxx::tree::traits< NS_type, char > NS_traits;

  const NS_type&
  NS () const;

  NS_type&
  NS ();

  void
  NS (const NS_type& x);

  // NT
  // 
  typedef ::xml_schema::int_ NT_type;
  typedef ::xsd::cxx::tree::traits< NT_type, char > NT_traits;

  const NT_type&
  NT () const;

  NT_type&
  NT ();

  void
  NT (const NT_type& x);

  // epsilon
  // 
  typedef ::xml_schema::double_ epsilon_type;
  typedef ::xsd::cxx::tree::traits< epsilon_type, char, ::xsd::cxx::tree::schema_type::double_ > epsilon_traits;

  const epsilon_type&
  epsilon () const;

  epsilon_type&
  epsilon ();

  void
  epsilon (const epsilon_type& x);

  // maxNoEval
  // 
  typedef ::xml_schema::int_ maxNoEval_type;
  typedef ::xsd::cxx::tree::traits< maxNoEval_type, char > maxNoEval_traits;

  const maxNoEval_type&
  maxNoEval () const;

  maxNoEval_type&
  maxNoEval ();

  void
  maxNoEval (const maxNoEval_type& x);

  // Constructors.
  //
  SimulatedAnnealingType (const noEpsilon_type&,
                          const rt_type&,
                          const T_type&,
                          const NS_type&,
                          const NT_type&,
                          const epsilon_type&,
                          const maxNoEval_type&);

  SimulatedAnnealingType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  SimulatedAnnealingType (const SimulatedAnnealingType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual SimulatedAnnealingType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SimulatedAnnealingType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< noEpsilon_type > noEpsilon_;
  ::xsd::cxx::tree::one< rt_type > rt_;
  ::xsd::cxx::tree::one< T_type > T_;
  ::xsd::cxx::tree::one< NS_type > NS_;
  ::xsd::cxx::tree::one< NT_type > NT_;
  ::xsd::cxx::tree::one< epsilon_type > epsilon_;
  ::xsd::cxx::tree::one< maxNoEval_type > maxNoEval_;
};

class AlgorithmType: public ::xml_schema::type
{
  public:
  // simulatedAnnealing
  // 
  typedef ::SimulatedAnnealingType simulatedAnnealing_type;
  typedef ::xsd::cxx::tree::traits< simulatedAnnealing_type, char > simulatedAnnealing_traits;

  const simulatedAnnealing_type&
  simulatedAnnealing () const;

  simulatedAnnealing_type&
  simulatedAnnealing ();

  void
  simulatedAnnealing (const simulatedAnnealing_type& x);

  void
  simulatedAnnealing (::std::auto_ptr< simulatedAnnealing_type > p);

  // Constructors.
  //
  AlgorithmType (const simulatedAnnealing_type&);

  AlgorithmType (::std::auto_ptr< simulatedAnnealing_type >&);

  AlgorithmType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  AlgorithmType (const AlgorithmType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual AlgorithmType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~AlgorithmType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< simulatedAnnealing_type > simulatedAnnealing_;
};

class OpenLoopType: public ::xml_schema::type
{
  public:
  // Constructors.
  //
  OpenLoopType ();

  OpenLoopType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  OpenLoopType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  OpenLoopType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  OpenLoopType (const OpenLoopType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual OpenLoopType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~OpenLoopType ();
};

class TypeType: public ::xml_schema::type
{
  public:
  // openLoop
  // 
  typedef ::OpenLoopType openLoop_type;
  typedef ::xsd::cxx::tree::traits< openLoop_type, char > openLoop_traits;

  const openLoop_type&
  openLoop () const;

  openLoop_type&
  openLoop ();

  void
  openLoop (const openLoop_type& x);

  void
  openLoop (::std::auto_ptr< openLoop_type > p);

  // Constructors.
  //
  TypeType (const openLoop_type&);

  TypeType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  TypeType (const TypeType& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual TypeType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TypeType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< openLoop_type > openLoop_;
};

class TendonElementType: public ::xml_schema::type
{
  public:
  // Constructors.
  //
  TendonElementType ();

  TendonElementType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  TendonElementType (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  TendonElementType (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  TendonElementType (const TendonElementType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual TendonElementType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TendonElementType ();
};

class TendonType: public ::xml_schema::type
{
  public:
  // stiff
  // 
  typedef ::TendonElementType stiff_type;
  typedef ::xsd::cxx::tree::optional< stiff_type > stiff_optional;
  typedef ::xsd::cxx::tree::traits< stiff_type, char > stiff_traits;

  const stiff_optional&
  stiff () const;

  stiff_optional&
  stiff ();

  void
  stiff (const stiff_type& x);

  void
  stiff (const stiff_optional& x);

  void
  stiff (::std::auto_ptr< stiff_type > p);

  // elastic
  // 
  typedef ::TendonElementType elastic_type;
  typedef ::xsd::cxx::tree::optional< elastic_type > elastic_optional;
  typedef ::xsd::cxx::tree::traits< elastic_type, char > elastic_traits;

  const elastic_optional&
  elastic () const;

  elastic_optional&
  elastic ();

  void
  elastic (const elastic_type& x);

  void
  elastic (const elastic_optional& x);

  void
  elastic (::std::auto_ptr< elastic_type > p);

  // elasticBiSec
  // 
  typedef ::TendonElementType elasticBiSec_type;
  typedef ::xsd::cxx::tree::optional< elasticBiSec_type > elasticBiSec_optional;
  typedef ::xsd::cxx::tree::traits< elasticBiSec_type, char > elasticBiSec_traits;

  const elasticBiSec_optional&
  elasticBiSec () const;

  elasticBiSec_optional&
  elasticBiSec ();

  void
  elasticBiSec (const elasticBiSec_type& x);

  void
  elasticBiSec (const elasticBiSec_optional& x);

  void
  elasticBiSec (::std::auto_ptr< elasticBiSec_type > p);

  // Constructors.
  //
  TendonType ();

  TendonType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  TendonType (const TendonType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual TendonType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TendonType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  stiff_optional stiff_;
  elastic_optional elastic_;
  elasticBiSec_optional elasticBiSec_;
};

class ActivationElementType: public ::xml_schema::type
{
  public:
  // Constructors.
  //
  ActivationElementType ();

  ActivationElementType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  ActivationElementType (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  ActivationElementType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  ActivationElementType (const ActivationElementType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual ActivationElementType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ActivationElementType ();
};

class ActivationType: public ::xml_schema::type
{
  public:
  // exponential
  // 
  typedef ::ActivationElementType exponential_type;
  typedef ::xsd::cxx::tree::optional< exponential_type > exponential_optional;
  typedef ::xsd::cxx::tree::traits< exponential_type, char > exponential_traits;

  const exponential_optional&
  exponential () const;

  exponential_optional&
  exponential ();

  void
  exponential (const exponential_type& x);

  void
  exponential (const exponential_optional& x);

  void
  exponential (::std::auto_ptr< exponential_type > p);

  // piecewise
  // 
  typedef ::ActivationElementType piecewise_type;
  typedef ::xsd::cxx::tree::optional< piecewise_type > piecewise_optional;
  typedef ::xsd::cxx::tree::traits< piecewise_type, char > piecewise_traits;

  const piecewise_optional&
  piecewise () const;

  piecewise_optional&
  piecewise ();

  void
  piecewise (const piecewise_type& x);

  void
  piecewise (const piecewise_optional& x);

  void
  piecewise (::std::auto_ptr< piecewise_type > p);

  // Constructors.
  //
  ActivationType ();

  ActivationType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  ActivationType (const ActivationType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual ActivationType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ActivationType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  exponential_optional exponential_;
  piecewise_optional piecewise_;
};

class NMSModelType: public ::xml_schema::type
{
  public:
  // type
  // 
  typedef ::TypeType type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // tendon
  // 
  typedef ::TendonType tendon_type;
  typedef ::xsd::cxx::tree::traits< tendon_type, char > tendon_traits;

  const tendon_type&
  tendon () const;

  tendon_type&
  tendon ();

  void
  tendon (const tendon_type& x);

  void
  tendon (::std::auto_ptr< tendon_type > p);

  // activation
  // 
  typedef ::ActivationType activation_type;
  typedef ::xsd::cxx::tree::traits< activation_type, char > activation_traits;

  const activation_type&
  activation () const;

  activation_type&
  activation ();

  void
  activation (const activation_type& x);

  void
  activation (::std::auto_ptr< activation_type > p);

  // Constructors.
  //
  NMSModelType (const type_type&,
                const tendon_type&,
                const activation_type&);

  NMSModelType (::std::auto_ptr< type_type >&,
                ::std::auto_ptr< tendon_type >&,
                ::std::auto_ptr< activation_type >&);

  NMSModelType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  NMSModelType (const NMSModelType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual NMSModelType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~NMSModelType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< type_type > type_;
  ::xsd::cxx::tree::one< tendon_type > tendon_;
  ::xsd::cxx::tree::one< activation_type > activation_;
};

class TrialSetType: public ::xml_schema::simple_type,
  public ::xsd::cxx::tree::list< ::xml_schema::string, char >
{
  public:
  TrialSetType ();

  TrialSetType (size_type n, const ::xml_schema::string& x);

  template < typename I >
  TrialSetType (const I& begin, const I& end)
  : ::xsd::cxx::tree::list< ::xml_schema::string, char > (begin, end, this)
  {
  }

  TrialSetType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  TrialSetType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  TrialSetType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  TrialSetType (const TrialSetType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual TrialSetType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TrialSetType ();
};

class ObjectiveFunctionElementType: public ::xml_schema::type
{
  public:
  // Constructors.
  //
  ObjectiveFunctionElementType ();

  ObjectiveFunctionElementType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  ObjectiveFunctionElementType (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  ObjectiveFunctionElementType (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  ObjectiveFunctionElementType (const ObjectiveFunctionElementType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  virtual ObjectiveFunctionElementType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ObjectiveFunctionElementType ();
};

class ComputationModeElementType: public ::xml_schema::type
{
  public:
  // Constructors.
  //
  ComputationModeElementType ();

  ComputationModeElementType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  ComputationModeElementType (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  ComputationModeElementType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  ComputationModeElementType (const ComputationModeElementType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  virtual ComputationModeElementType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ComputationModeElementType ();
};

class GlobalParameterType: public ::xml_schema::type
{
  public:
  // Constructors.
  //
  GlobalParameterType ();

  GlobalParameterType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  GlobalParameterType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  GlobalParameterType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  GlobalParameterType (const GlobalParameterType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual GlobalParameterType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GlobalParameterType ();
};

class SingleParameterType: public ::xml_schema::type
{
  public:
  // Constructors.
  //
  SingleParameterType ();

  SingleParameterType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  SingleParameterType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  SingleParameterType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  SingleParameterType (const SingleParameterType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual SingleParameterType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SingleParameterType ();
};

class ObjectiveFunctionType: public ::xml_schema::type
{
  public:
  // minimizeTorqueError
  // 
  typedef ::ObjectiveFunctionElementType minimizeTorqueError_type;
  typedef ::xsd::cxx::tree::traits< minimizeTorqueError_type, char > minimizeTorqueError_traits;

  const minimizeTorqueError_type&
  minimizeTorqueError () const;

  minimizeTorqueError_type&
  minimizeTorqueError ();

  void
  minimizeTorqueError (const minimizeTorqueError_type& x);

  void
  minimizeTorqueError (::std::auto_ptr< minimizeTorqueError_type > p);

  // Constructors.
  //
  ObjectiveFunctionType (const minimizeTorqueError_type&);

  ObjectiveFunctionType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  ObjectiveFunctionType (const ObjectiveFunctionType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual ObjectiveFunctionType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ObjectiveFunctionType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< minimizeTorqueError_type > minimizeTorqueError_;
};

class DoFsType: public ::xml_schema::simple_type,
  public ::xsd::cxx::tree::list< ::xml_schema::string, char >
{
  public:
  DoFsType ();

  DoFsType (size_type n, const ::xml_schema::string& x);

  template < typename I >
  DoFsType (const I& begin, const I& end)
  : ::xsd::cxx::tree::list< ::xml_schema::string, char > (begin, end, this)
  {
  }

  DoFsType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  DoFsType (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  DoFsType (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  DoFsType (const DoFsType& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual DoFsType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~DoFsType ();
};

class HardCodedParametersSelectionType: public ::xml_schema::type
{
  public:
  // Constructors.
  //
  HardCodedParametersSelectionType ();

  HardCodedParametersSelectionType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  HardCodedParametersSelectionType (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  HardCodedParametersSelectionType (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  HardCodedParametersSelectionType (const HardCodedParametersSelectionType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  virtual HardCodedParametersSelectionType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~HardCodedParametersSelectionType ();
};

class ComputationModeType: public ::xml_schema::type
{
  public:
  // default
  // 
  typedef ::ComputationModeElementType default_type;
  typedef ::xsd::cxx::tree::optional< default_type > default_optional;
  typedef ::xsd::cxx::tree::traits< default_type, char > default_traits;

  const default_optional&
  default_ () const;

  default_optional&
  default_ ();

  void
  default_ (const default_type& x);

  void
  default_ (const default_optional& x);

  void
  default_ (::std::auto_ptr< default_type > p);

  // fast
  // 
  typedef ::ComputationModeElementType fast_type;
  typedef ::xsd::cxx::tree::optional< fast_type > fast_optional;
  typedef ::xsd::cxx::tree::traits< fast_type, char > fast_traits;

  const fast_optional&
  fast () const;

  fast_optional&
  fast ();

  void
  fast (const fast_type& x);

  void
  fast (const fast_optional& x);

  void
  fast (::std::auto_ptr< fast_type > p);

  // Constructors.
  //
  ComputationModeType ();

  ComputationModeType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  ComputationModeType (const ComputationModeType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual ComputationModeType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ComputationModeType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  default_optional default__;
  fast_optional fast_;
};

class TwoDoublesType: public ::xml_schema::simple_type,
  public ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >
{
  public:
  TwoDoublesType ();

  TwoDoublesType (size_type n, const ::xml_schema::double_& x);

  template < typename I >
  TwoDoublesType (const I& begin, const I& end)
  : ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ > (begin, end, this)
  {
  }

  TwoDoublesType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  TwoDoublesType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  TwoDoublesType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  TwoDoublesType (const TwoDoublesType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual TwoDoublesType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TwoDoublesType ();
};

class RangeType: public ::xml_schema::type
{
  public:
  // range
  // 
  typedef ::TwoDoublesType range_type;
  typedef ::xsd::cxx::tree::traits< range_type, char > range_traits;

  const range_type&
  range () const;

  range_type&
  range ();

  void
  range (const range_type& x);

  void
  range (::std::auto_ptr< range_type > p);

  // Constructors.
  //
  RangeType (const range_type&);

  RangeType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  RangeType (const RangeType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual RangeType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RangeType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< range_type > range_;
};

class MuscleListType: public ::xml_schema::simple_type,
  public ::xsd::cxx::tree::list< ::xml_schema::string, char >
{
  public:
  MuscleListType ();

  MuscleListType (size_type n, const ::xml_schema::string& x);

  template < typename I >
  MuscleListType (const I& begin, const I& end)
  : ::xsd::cxx::tree::list< ::xml_schema::string, char > (begin, end, this)
  {
  }

  MuscleListType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  MuscleListType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  MuscleListType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  MuscleListType (const MuscleListType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual MuscleListType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MuscleListType ();
};

class MuscleGroupsType: public ::xml_schema::type
{
  public:
  // muscles
  // 
  typedef ::MuscleListType muscles_type;
  typedef ::xsd::cxx::tree::sequence< muscles_type > muscles_sequence;
  typedef muscles_sequence::iterator muscles_iterator;
  typedef muscles_sequence::const_iterator muscles_const_iterator;
  typedef ::xsd::cxx::tree::traits< muscles_type, char > muscles_traits;

  const muscles_sequence&
  muscles () const;

  muscles_sequence&
  muscles ();

  void
  muscles (const muscles_sequence& s);

  // Constructors.
  //
  MuscleGroupsType ();

  MuscleGroupsType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  MuscleGroupsType (const MuscleGroupsType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual MuscleGroupsType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MuscleGroupsType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  muscles_sequence muscles_;
};

class ParameterType: public ::xml_schema::type
{
  public:
  // name
  // 
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // muscleGroups
  // 
  typedef ::MuscleGroupsType muscleGroups_type;
  typedef ::xsd::cxx::tree::optional< muscleGroups_type > muscleGroups_optional;
  typedef ::xsd::cxx::tree::traits< muscleGroups_type, char > muscleGroups_traits;

  const muscleGroups_optional&
  muscleGroups () const;

  muscleGroups_optional&
  muscleGroups ();

  void
  muscleGroups (const muscleGroups_type& x);

  void
  muscleGroups (const muscleGroups_optional& x);

  void
  muscleGroups (::std::auto_ptr< muscleGroups_type > p);

  // global
  // 
  typedef ::GlobalParameterType global_type;
  typedef ::xsd::cxx::tree::optional< global_type > global_optional;
  typedef ::xsd::cxx::tree::traits< global_type, char > global_traits;

  const global_optional&
  global () const;

  global_optional&
  global ();

  void
  global (const global_type& x);

  void
  global (const global_optional& x);

  void
  global (::std::auto_ptr< global_type > p);

  // single
  // 
  typedef ::SingleParameterType single_type;
  typedef ::xsd::cxx::tree::optional< single_type > single_optional;
  typedef ::xsd::cxx::tree::traits< single_type, char > single_traits;

  const single_optional&
  single () const;

  single_optional&
  single ();

  void
  single (const single_type& x);

  void
  single (const single_optional& x);

  void
  single (::std::auto_ptr< single_type > p);

  // absolute
  // 
  typedef ::RangeType absolute_type;
  typedef ::xsd::cxx::tree::optional< absolute_type > absolute_optional;
  typedef ::xsd::cxx::tree::traits< absolute_type, char > absolute_traits;

  const absolute_optional&
  absolute () const;

  absolute_optional&
  absolute ();

  void
  absolute (const absolute_type& x);

  void
  absolute (const absolute_optional& x);

  void
  absolute (::std::auto_ptr< absolute_type > p);

  // relativeToSubjectValue
  // 
  typedef ::RangeType relativeToSubjectValue_type;
  typedef ::xsd::cxx::tree::optional< relativeToSubjectValue_type > relativeToSubjectValue_optional;
  typedef ::xsd::cxx::tree::traits< relativeToSubjectValue_type, char > relativeToSubjectValue_traits;

  const relativeToSubjectValue_optional&
  relativeToSubjectValue () const;

  relativeToSubjectValue_optional&
  relativeToSubjectValue ();

  void
  relativeToSubjectValue (const relativeToSubjectValue_type& x);

  void
  relativeToSubjectValue (const relativeToSubjectValue_optional& x);

  void
  relativeToSubjectValue (::std::auto_ptr< relativeToSubjectValue_type > p);

  // Constructors.
  //
  ParameterType (const name_type&);

  ParameterType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  ParameterType (const ParameterType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual ParameterType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ParameterType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
  muscleGroups_optional muscleGroups_;
  global_optional global_;
  single_optional single_;
  absolute_optional absolute_;
  relativeToSubjectValue_optional relativeToSubjectValue_;
};

class parameterSetType: public ::xml_schema::type
{
  public:
  // parameter
  // 
  typedef ::ParameterType parameter_type;
  typedef ::xsd::cxx::tree::sequence< parameter_type > parameter_sequence;
  typedef parameter_sequence::iterator parameter_iterator;
  typedef parameter_sequence::const_iterator parameter_const_iterator;
  typedef ::xsd::cxx::tree::traits< parameter_type, char > parameter_traits;

  const parameter_sequence&
  parameter () const;

  parameter_sequence&
  parameter ();

  void
  parameter (const parameter_sequence& s);

  // Constructors.
  //
  parameterSetType ();

  parameterSetType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  parameterSetType (const parameterSetType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual parameterSetType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~parameterSetType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  parameter_sequence parameter_;
};

class StepType: public ::xml_schema::type
{
  public:
  // dofs
  // 
  typedef ::DoFsType dofs_type;
  typedef ::xsd::cxx::tree::traits< dofs_type, char > dofs_traits;

  const dofs_type&
  dofs () const;

  dofs_type&
  dofs ();

  void
  dofs (const dofs_type& x);

  void
  dofs (::std::auto_ptr< dofs_type > p);

  // objectiveFunction
  // 
  typedef ::ObjectiveFunctionType objectiveFunction_type;
  typedef ::xsd::cxx::tree::traits< objectiveFunction_type, char > objectiveFunction_traits;

  const objectiveFunction_type&
  objectiveFunction () const;

  objectiveFunction_type&
  objectiveFunction ();

  void
  objectiveFunction (const objectiveFunction_type& x);

  void
  objectiveFunction (::std::auto_ptr< objectiveFunction_type > p);

  // computationMode
  // 
  typedef ::ComputationModeType computationMode_type;
  typedef ::xsd::cxx::tree::traits< computationMode_type, char > computationMode_traits;

  const computationMode_type&
  computationMode () const;

  computationMode_type&
  computationMode ();

  void
  computationMode (const computationMode_type& x);

  void
  computationMode (::std::auto_ptr< computationMode_type > p);

  // strengthCoefficients_ShapeFactor_C1_C2_TendonSLackLength_single
  // 
  typedef ::HardCodedParametersSelectionType strengthCoefficients_ShapeFactor_C1_C2_TendonSLackLength_single_type;
  typedef ::xsd::cxx::tree::optional< strengthCoefficients_ShapeFactor_C1_C2_TendonSLackLength_single_type > strengthCoefficients_ShapeFactor_C1_C2_TendonSLackLength_single_optional;
  typedef ::xsd::cxx::tree::traits< strengthCoefficients_ShapeFactor_C1_C2_TendonSLackLength_single_type, char > strengthCoefficients_ShapeFactor_C1_C2_TendonSLackLength_single_traits;

  const strengthCoefficients_ShapeFactor_C1_C2_TendonSLackLength_single_optional&
  strengthCoefficients_ShapeFactor_C1_C2_TendonSLackLength_single () const;

  strengthCoefficients_ShapeFactor_C1_C2_TendonSLackLength_single_optional&
  strengthCoefficients_ShapeFactor_C1_C2_TendonSLackLength_single ();

  void
  strengthCoefficients_ShapeFactor_C1_C2_TendonSLackLength_single (const strengthCoefficients_ShapeFactor_C1_C2_TendonSLackLength_single_type& x);

  void
  strengthCoefficients_ShapeFactor_C1_C2_TendonSLackLength_single (const strengthCoefficients_ShapeFactor_C1_C2_TendonSLackLength_single_optional& x);

  void
  strengthCoefficients_ShapeFactor_C1_C2_TendonSLackLength_single (::std::auto_ptr< strengthCoefficients_ShapeFactor_C1_C2_TendonSLackLength_single_type > p);

  // parameterSet
  // 
  typedef ::parameterSetType parameterSet_type;
  typedef ::xsd::cxx::tree::optional< parameterSet_type > parameterSet_optional;
  typedef ::xsd::cxx::tree::traits< parameterSet_type, char > parameterSet_traits;

  const parameterSet_optional&
  parameterSet () const;

  parameterSet_optional&
  parameterSet ();

  void
  parameterSet (const parameterSet_type& x);

  void
  parameterSet (const parameterSet_optional& x);

  void
  parameterSet (::std::auto_ptr< parameterSet_type > p);

  // Constructors.
  //
  StepType (const dofs_type&,
            const objectiveFunction_type&,
            const computationMode_type&);

  StepType (const dofs_type&,
            ::std::auto_ptr< objectiveFunction_type >&,
            ::std::auto_ptr< computationMode_type >&);

  StepType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  StepType (const StepType& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual StepType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~StepType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< dofs_type > dofs_;
  ::xsd::cxx::tree::one< objectiveFunction_type > objectiveFunction_;
  ::xsd::cxx::tree::one< computationMode_type > computationMode_;
  strengthCoefficients_ShapeFactor_C1_C2_TendonSLackLength_single_optional strengthCoefficients_ShapeFactor_C1_C2_TendonSLackLength_single_;
  parameterSet_optional parameterSet_;
};

class CalibrationStepsType: public ::xml_schema::type
{
  public:
  // step
  // 
  typedef ::StepType step_type;
  typedef ::xsd::cxx::tree::sequence< step_type > step_sequence;
  typedef step_sequence::iterator step_iterator;
  typedef step_sequence::const_iterator step_const_iterator;
  typedef ::xsd::cxx::tree::traits< step_type, char > step_traits;

  const step_sequence&
  step () const;

  step_sequence&
  step ();

  void
  step (const step_sequence& s);

  // Constructors.
  //
  CalibrationStepsType ();

  CalibrationStepsType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  CalibrationStepsType (const CalibrationStepsType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual CalibrationStepsType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CalibrationStepsType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  step_sequence step_;
};

class CalibrationType: public ::xml_schema::type
{
  public:
  // algorithm
  // 
  typedef ::AlgorithmType algorithm_type;
  typedef ::xsd::cxx::tree::traits< algorithm_type, char > algorithm_traits;

  const algorithm_type&
  algorithm () const;

  algorithm_type&
  algorithm ();

  void
  algorithm (const algorithm_type& x);

  void
  algorithm (::std::auto_ptr< algorithm_type > p);

  // NMSmodel
  // 
  typedef ::NMSModelType NMSmodel_type;
  typedef ::xsd::cxx::tree::traits< NMSmodel_type, char > NMSmodel_traits;

  const NMSmodel_type&
  NMSmodel () const;

  NMSmodel_type&
  NMSmodel ();

  void
  NMSmodel (const NMSmodel_type& x);

  void
  NMSmodel (::std::auto_ptr< NMSmodel_type > p);

  // samplingFrequency
  // 
  typedef ::xml_schema::int_ samplingFrequency_type;
  typedef ::xsd::cxx::tree::optional< samplingFrequency_type > samplingFrequency_optional;
  typedef ::xsd::cxx::tree::traits< samplingFrequency_type, char > samplingFrequency_traits;

  const samplingFrequency_optional&
  samplingFrequency () const;

  samplingFrequency_optional&
  samplingFrequency ();

  void
  samplingFrequency (const samplingFrequency_type& x);

  void
  samplingFrequency (const samplingFrequency_optional& x);

  // calibrationSteps
  // 
  typedef ::CalibrationStepsType calibrationSteps_type;
  typedef ::xsd::cxx::tree::traits< calibrationSteps_type, char > calibrationSteps_traits;

  const calibrationSteps_type&
  calibrationSteps () const;

  calibrationSteps_type&
  calibrationSteps ();

  void
  calibrationSteps (const calibrationSteps_type& x);

  void
  calibrationSteps (::std::auto_ptr< calibrationSteps_type > p);

  // trialSet
  // 
  typedef ::TrialSetType trialSet_type;
  typedef ::xsd::cxx::tree::traits< trialSet_type, char > trialSet_traits;

  const trialSet_type&
  trialSet () const;

  trialSet_type&
  trialSet ();

  void
  trialSet (const trialSet_type& x);

  void
  trialSet (::std::auto_ptr< trialSet_type > p);

  // Constructors.
  //
  CalibrationType (const algorithm_type&,
                   const NMSmodel_type&,
                   const calibrationSteps_type&,
                   const trialSet_type&);

  CalibrationType (::std::auto_ptr< algorithm_type >&,
                   ::std::auto_ptr< NMSmodel_type >&,
                   ::std::auto_ptr< calibrationSteps_type >&,
                   const trialSet_type&);

  CalibrationType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  CalibrationType (const CalibrationType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual CalibrationType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CalibrationType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< algorithm_type > algorithm_;
  ::xsd::cxx::tree::one< NMSmodel_type > NMSmodel_;
  samplingFrequency_optional samplingFrequency_;
  ::xsd::cxx::tree::one< calibrationSteps_type > calibrationSteps_;
  ::xsd::cxx::tree::one< trialSet_type > trialSet_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::CalibrationType >
calibration (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CalibrationType >
calibration (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CalibrationType >
calibration (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::CalibrationType >
calibration (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CalibrationType >
calibration (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CalibrationType >
calibration (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CalibrationType >
calibration (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CalibrationType >
calibration (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CalibrationType >
calibration (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::CalibrationType >
calibration (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CalibrationType >
calibration (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CalibrationType >
calibration (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::CalibrationType >
calibration (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CalibrationType >
calibration (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX______CFG_XSD_CALIBRATION_HXX
