// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "simulatedAnnealing.hxx"

// SimulatedAnnealingType
// 

const SimulatedAnnealingType::noEpsilon_type& SimulatedAnnealingType::
noEpsilon () const
{
  return this->noEpsilon_.get ();
}

SimulatedAnnealingType::noEpsilon_type& SimulatedAnnealingType::
noEpsilon ()
{
  return this->noEpsilon_.get ();
}

void SimulatedAnnealingType::
noEpsilon (const noEpsilon_type& x)
{
  this->noEpsilon_.set (x);
}

const SimulatedAnnealingType::rt_type& SimulatedAnnealingType::
rt () const
{
  return this->rt_.get ();
}

SimulatedAnnealingType::rt_type& SimulatedAnnealingType::
rt ()
{
  return this->rt_.get ();
}

void SimulatedAnnealingType::
rt (const rt_type& x)
{
  this->rt_.set (x);
}

const SimulatedAnnealingType::T_type& SimulatedAnnealingType::
T () const
{
  return this->T_.get ();
}

SimulatedAnnealingType::T_type& SimulatedAnnealingType::
T ()
{
  return this->T_.get ();
}

void SimulatedAnnealingType::
T (const T_type& x)
{
  this->T_.set (x);
}

const SimulatedAnnealingType::NS_type& SimulatedAnnealingType::
NS () const
{
  return this->NS_.get ();
}

SimulatedAnnealingType::NS_type& SimulatedAnnealingType::
NS ()
{
  return this->NS_.get ();
}

void SimulatedAnnealingType::
NS (const NS_type& x)
{
  this->NS_.set (x);
}

const SimulatedAnnealingType::NT_type& SimulatedAnnealingType::
NT () const
{
  return this->NT_.get ();
}

SimulatedAnnealingType::NT_type& SimulatedAnnealingType::
NT ()
{
  return this->NT_.get ();
}

void SimulatedAnnealingType::
NT (const NT_type& x)
{
  this->NT_.set (x);
}

const SimulatedAnnealingType::epsilon_type& SimulatedAnnealingType::
epsilon () const
{
  return this->epsilon_.get ();
}

SimulatedAnnealingType::epsilon_type& SimulatedAnnealingType::
epsilon ()
{
  return this->epsilon_.get ();
}

void SimulatedAnnealingType::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

const SimulatedAnnealingType::maxNoEval_type& SimulatedAnnealingType::
maxNoEval () const
{
  return this->maxNoEval_.get ();
}

SimulatedAnnealingType::maxNoEval_type& SimulatedAnnealingType::
maxNoEval ()
{
  return this->maxNoEval_.get ();
}

void SimulatedAnnealingType::
maxNoEval (const maxNoEval_type& x)
{
  this->maxNoEval_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// SimulatedAnnealingType
//

SimulatedAnnealingType::
SimulatedAnnealingType (const noEpsilon_type& noEpsilon,
                        const rt_type& rt,
                        const T_type& T,
                        const NS_type& NS,
                        const NT_type& NT,
                        const epsilon_type& epsilon,
                        const maxNoEval_type& maxNoEval)
: ::xml_schema::type (),
  noEpsilon_ (noEpsilon, ::xml_schema::flags (), this),
  rt_ (rt, ::xml_schema::flags (), this),
  T_ (T, ::xml_schema::flags (), this),
  NS_ (NS, ::xml_schema::flags (), this),
  NT_ (NT, ::xml_schema::flags (), this),
  epsilon_ (epsilon, ::xml_schema::flags (), this),
  maxNoEval_ (maxNoEval, ::xml_schema::flags (), this)
{
}

SimulatedAnnealingType::
SimulatedAnnealingType (const SimulatedAnnealingType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  noEpsilon_ (x.noEpsilon_, f, this),
  rt_ (x.rt_, f, this),
  T_ (x.T_, f, this),
  NS_ (x.NS_, f, this),
  NT_ (x.NT_, f, this),
  epsilon_ (x.epsilon_, f, this),
  maxNoEval_ (x.maxNoEval_, f, this)
{
}

SimulatedAnnealingType::
SimulatedAnnealingType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  noEpsilon_ (f, this),
  rt_ (f, this),
  T_ (f, this),
  NS_ (f, this),
  NT_ (f, this),
  epsilon_ (f, this),
  maxNoEval_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void SimulatedAnnealingType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // noEpsilon
    //
    if (n.name () == "noEpsilon" && n.namespace_ ().empty ())
    {
      if (!noEpsilon_.present ())
      {
        this->noEpsilon_.set (noEpsilon_traits::create (i, f, this));
        continue;
      }
    }

    // rt
    //
    if (n.name () == "rt" && n.namespace_ ().empty ())
    {
      if (!rt_.present ())
      {
        this->rt_.set (rt_traits::create (i, f, this));
        continue;
      }
    }

    // T
    //
    if (n.name () == "T" && n.namespace_ ().empty ())
    {
      if (!T_.present ())
      {
        this->T_.set (T_traits::create (i, f, this));
        continue;
      }
    }

    // NS
    //
    if (n.name () == "NS" && n.namespace_ ().empty ())
    {
      if (!NS_.present ())
      {
        this->NS_.set (NS_traits::create (i, f, this));
        continue;
      }
    }

    // NT
    //
    if (n.name () == "NT" && n.namespace_ ().empty ())
    {
      if (!NT_.present ())
      {
        this->NT_.set (NT_traits::create (i, f, this));
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!epsilon_.present ())
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // maxNoEval
    //
    if (n.name () == "maxNoEval" && n.namespace_ ().empty ())
    {
      if (!maxNoEval_.present ())
      {
        this->maxNoEval_.set (maxNoEval_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!noEpsilon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "noEpsilon",
      "");
  }

  if (!rt_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "rt",
      "");
  }

  if (!T_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "T",
      "");
  }

  if (!NS_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "NS",
      "");
  }

  if (!NT_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "NT",
      "");
  }

  if (!epsilon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "epsilon",
      "");
  }

  if (!maxNoEval_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "maxNoEval",
      "");
  }
}

SimulatedAnnealingType* SimulatedAnnealingType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class SimulatedAnnealingType (*this, f, c);
}

SimulatedAnnealingType::
~SimulatedAnnealingType ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::SimulatedAnnealingType > r (
    ::simulatedAnnealing (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::SimulatedAnnealingType > r (
    ::simulatedAnnealing (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::SimulatedAnnealingType > r (
    ::simulatedAnnealing (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulatedAnnealing (isrc, f, p);
}

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulatedAnnealing (isrc, h, f, p);
}

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulatedAnnealing (isrc, h, f, p);
}

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulatedAnnealing (isrc, f, p);
}

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulatedAnnealing (isrc, h, f, p);
}

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulatedAnnealing (isrc, h, f, p);
}

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::SimulatedAnnealingType > r (
    ::simulatedAnnealing (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::SimulatedAnnealingType > r (
    ::simulatedAnnealing (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::SimulatedAnnealingType > r (
    ::simulatedAnnealing (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::SimulatedAnnealingType > r (
      ::simulatedAnnealing (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "simulatedAnnealing" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::SimulatedAnnealingType > r (
      ::xsd::cxx::tree::traits< ::SimulatedAnnealingType, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulatedAnnealing",
    "");
}

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "simulatedAnnealing" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::SimulatedAnnealingType > r (
      ::xsd::cxx::tree::traits< ::SimulatedAnnealingType, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulatedAnnealing",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const SimulatedAnnealingType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // noEpsilon
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "noEpsilon",
        e));

    s << i.noEpsilon ();
  }

  // rt
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "rt",
        e));

    s << ::xml_schema::as_double(i.rt ());
  }

  // T
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "T",
        e));

    s << ::xml_schema::as_double(i.T ());
  }

  // NS
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "NS",
        e));

    s << i.NS ();
  }

  // NT
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "NT",
        e));

    s << i.NT ();
  }

  // epsilon
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "epsilon",
        e));

    s << ::xml_schema::as_double(i.epsilon ());
  }

  // maxNoEval
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "maxNoEval",
        e));

    s << i.maxNoEval ();
  }
}

void
simulatedAnnealing (::std::ostream& o,
                    const ::SimulatedAnnealingType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::simulatedAnnealing (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
simulatedAnnealing (::std::ostream& o,
                    const ::SimulatedAnnealingType& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::simulatedAnnealing (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulatedAnnealing (::std::ostream& o,
                    const ::SimulatedAnnealingType& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::simulatedAnnealing (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulatedAnnealing (::xercesc::XMLFormatTarget& t,
                    const ::SimulatedAnnealingType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::simulatedAnnealing (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
simulatedAnnealing (::xercesc::XMLFormatTarget& t,
                    const ::SimulatedAnnealingType& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::simulatedAnnealing (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulatedAnnealing (::xercesc::XMLFormatTarget& t,
                    const ::SimulatedAnnealingType& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::simulatedAnnealing (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulatedAnnealing (::xercesc::DOMDocument& d,
                    const ::SimulatedAnnealingType& s,
                    ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "simulatedAnnealing" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "simulatedAnnealing",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
simulatedAnnealing (const ::SimulatedAnnealingType& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "simulatedAnnealing",
      "",
      m, f));

  ::simulatedAnnealing (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

